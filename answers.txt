1)Какие три основные области работы с файлами в Git (рабочая папка, индекс, репозиторий) и чем они отличаются?
Рабочая папка — это просто папка у меня на компьютере, где я прямо сейчас работаю с файлами. Я могу их создавать, редактировать, удалять. Git здесь просто видит, что файлы поменялись.
Индекс — это такая «промежуточная зона» или «прихожая» перед коммитом. Я командой git add отправляю туда файлы, которые хочу сохранить в следующем коммите. Тут я формирую «снимок» изменений.
Репозиторий — это уже сама база данных Git, история всех изменений, которая хранится в скрытой папке .git. Когда я делаю git commit, все изменения из индекса навсегда сохраняются в репозитории как новая версия проекта.


2)Что происходит при выполнении команд:
git add — я беру измененные файлы из рабочей папки и подготавливаю их к коммиту, то есть добавляю в индекс (Staging Area). Git начинает отслеживать эти конкретные изменения.
git commit — я беру все, что лежит в индексе (всё, что было добавлено через git add), и сохраняю это в репозиторий как новую запись в истории (коммит). При этом нужно написать сообщение, что именно было сделано.
git push — я отправляю все свои новые коммиты из моего локального репозитория на удаленный сервер (например, на GitHub). Это нужно, чтобы поделиться кодом с другими или просто сохранить его в облаке.

3)Почему важно писать информативные сообщения к коммитам а не просто "исправление" или "update"?
Потому что если я посмотрю на историю через месяц (или меня попросит посмотреть кто-то другой), по сообщению "исправление" будет совершенно непонятно, что именно было исправлено и зачем. Придется открывать каждый коммит и смотреть, какие файлы менялись. А если написать, например, "Исправлена ошибка расчета скидки при количестве товара больше 10", сразу всё ясно. Это экономит кучу времени.


4)Чем отличается git add имя_файла от git add .? В каких случаях лучше использовать каждый вариант?
git add имя_файла — добавляет в индекс только один конкретный файл. Это удобно, когда я менял несколько файлов, но коммитить хочу только один из них (например, я еще не доделал изменения в другом).
git add . — добавляет в индекс ВСЕ измененные и новые файлы в текущей папке и всех вложенных. Это быстрее, когда я уверен, что все мои изменения в рабочей папке готовы для одного коммита.


5)Что показывает команда git status и как меняется ее вывод на разных этапах работы?
Она показывает текущее состояние рабочей папки и индекса. Вывод меняется так:
Сразу после изменения файла: git status покажет, что файл "modified" и он не в индексе (красным).
После git add: git status покажет, что файл "modified" и он в индексе, готов к коммиту (зеленым).
После git commit: git status напишет "nothing to commit, working tree clean", то есть всё чисто, неотслеживаемых изменений нет.


6)Для чего нужна команда git remote add origin URL и что означает слово "origin"?
Эта команда связывает мой локальный репозиторий с удаленным репозиторием на GitHub или другом сервисе. "Origin" — это просто стандартное короткое имя (псевдоним) для этого удаленного репозитория. Вместо того чтобы каждый раз писать длинный URL, я могу писать origin.


7)Зачем нужен флаг -u в команде git push -u origin main при первой отправке изменений?
Флаг -u (сокращение от --set-upstream) говорит Git'у: «запомни, что моя локальная ветка main должна всегда отправлять изменения в удаленную ветку origin/main». После того как я это сделал один раз, в дальнейшем я могу просто писать git push, и Git уже будет сам знать, куда именно пушить.


8)Что такое ветка (branch) по умолчанию и какая у вас создалась (main или master)? Почему это важно?
Ветка по умолчанию — это главная ветка в репозитории, куда обычно сливаются все изменения. У меня создалась ветка main. Раньше по умолчанию была master, но сейчас перешли на main. Это важно, потому что когда я делаю git clone или создаю новый репозиторий, я начинаю работу именно с этой ветки, и она считается основной и самой стабильной.

9)Как просмотреть историю коммитов и какую информацию о каждом коммите вы видите?
История коммитов просматривается командой git log. Я вижу:
Длинный хеш (уникальный ID коммита).
Автора коммита и дату.
Сообщение коммита (то самое, которое я писал).


10)Что произойдет, если сделать изменения в файле, но не выполнить git add перед git commit?
Ничего не произойдет, вернее, коммит не создастся. Git выдаст ошибку вроде "no changes added to commit". Коммит сохраняет только то, что было предварительно добавлено в индекс (staging area) командой git add. Так что мои изменения просто останутся в рабочей папке как незакоммиченные.